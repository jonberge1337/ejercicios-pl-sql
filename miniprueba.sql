/*1. Crear una función almacenada de nombre CUANTOS_ALBA que dadas dos fechas, devuelva el número de albaranes que existen entre las mismas */

CREATE OR REPLACE FUNCTION CUANTOS_ALBA(FEC1 IN DATE,
	   	  		  		   				FEC2 IN DATE)
RETURN NUMBER
IS
	CANTIDAD NUMBER(6);
BEGIN
	SELECT COUNT(*) INTO CANTIDAD
	FROM ALBARANES
	WHERE FECHA_ALBARAN BETWEEN FEC1 AND FEC2;

	RETURN CANTIDAD;

END CUANTOS_ALBA;



DECLARE
	FECHA1 DATE := TO_DATE('&FECHA', 'DD/MM/YYYY');
	FECHA2 DATE := TO_DATE('&FECHA', 'DD/MM/YYYY');
	CANTIDAD NUMBER(6);
BEGIN
	CANTIDAD := CUANTOS_ALBA(FECHA1, FECHA2);
	DBMS_OUTPUT.PUT_LINE('HAY '||CANTIDAD|| ' ALBARANES ENTRE '||FECHA1||' Y '||FECHA2);
END;

/* 2. Crear una función almacenada de nombre EXISTE_ARTI que compruebe si existe el identificador (articulo y proveedor) de un articulo determinado que se pasa como parámetro y devuelva verdadero o falso en cada caso*/

CREATE OR REPLACE FUNCTION EXISTE_ARTI(ART IN ARTICULOS.ARTICULO%TYPE,
	   	  		  		   			   PRO IN ARTICULOS.PROVEEDOR%TYPE)
RETURN BOOLEAN
IS
	ARTI ARTICULOS.ARTICULO%TYPE;
	PROV ARTICULOS.PROVEEDOR%TYPE;
	EXISTE BOOLEAN;
BEGIN
	SELECT ARTICULO, PROVEEDOR INTO ARTI, PROV
	FROM ARTICULOS
	WHERE ARTICULO = ART AND PROVEEDOR = PRO;

	EXISTE := TRUE;
	RETURN EXISTE;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		 EXISTE := FALSE;
		 RETURN EXISTE;
END EXISTE_ARTI;



DECLARE
	ARTI ARTICULOS.ARTICULO%TYPE := &ARTICULO;
	PROV ARTICULOS.PROVEEDOR%TYPE := &PROVEEDOR;
	EXISTE BOOLEAN;
BEGIN
	EXISTE := EXISTE_ARTI(ARTI, PROV);
	IF EXISTE THEN
	   DBMS_OUTPUT.PUT_LINE('ESE ARTICULO ESTA ENTRE LOS ARTICULOS DEL ALMACEN');
	ELSE
		DBMS_OUTPUT.PUT_LINE('ESE ARTICULO NO ESTA ENTRE LOS ARTICULOS DEL ALMACEN');
	END IF;
END;



/* 3. Crear una función almacenada de nombre INSERTA_UNI que dada un código y una descripción inserte una fila en la tabla UNIDADES y devuelva verdadero o falso en cada caso */

CREATE OR REPLACE FUNCTION INSERTA_UNI(COD IN UNIDADES.UNIDAD%TYPE
	   	  		  		   				DES IN UNIDADES.DESCRIPCION%TYPE)
RETURN BOOLEAN
IS
	INSERTADO BOOLEAN;
BEGIN
	INSERT INTO UNIDADES(UNIDAD, DESCRIPCION)
	VALUES(COD, DES);

	IF SQL%FOUND THEN
	   INSERTADO := TRUE;
	ELSE
		INSERTADO := FALSE;
	END IF;
	
	RETURN INSERTADO;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		 DBMS_OUTPUT.PUT_LINE('ESTAS DUPLICANDO LA CLAVE PRIMARIA');
		 RETURN FALSE;
	WHEN OTHER THEN
		 DBMS_OUTPUT.PUT_LINE('HA HABIDO UN ERROR');
		 RETURN FALSE;
END INSERTA_UNI;


DECLARE
	UNID UNIDADES.UNIDAD%TYPE := '&UNIDAD';
	DESCR UNIDADES.DESCRIPCION%TYPE := '&DESCRIPCION';
	INSERTADO BOOLEAN;
BEGIN
	INSERTADO := INSERTA_UNI(UNID, DESCR);

	IF INSERTADO THEN
	   DBMS_OUTPUT.PUT_LINE('HA SIDO INSERTADO');
	ELSE
		DBMS_OUTPUT.PUT_LINE('NO HA SIDO INSERTADO');
	END IF;
END;




/*4. Crear un procedimiento de nombre BORRA_ALBA que borre todos los albaranes que no contengan líneas */

CREATE OR REPLACE PROCEDURE BORRA_ALBA
IS
BEGIN
	DELETE FROM ALBARANES
	WHERE NOT EXISTS(SELECT *
		  	  		FROM LINEAS
					WHERE ALBARANES.ALBARAN = LINEAS.ALBARAN);
END BORRA_ALBA;

BEGIN
	BORRA_ALBA;
END;



/* 5. Crear un procedimiento que dado un código de cliente y un nombre de empresa, actualice dicho código con el nombre de la empresa y saque por pantalla un mensaje */

CREATE OR REPLACE PROCEDURE ACTU_CLI(COD IN CLIENTES.CLIENTE%TYPE,
	   	  		  					 EMP IN CLIENTES.EMPRESA%TYPE)
IS
BEGIN
	UPDATE CLIENTES
	SET CODIGO = COD, EMPRESA = EMP;

	IF SQL%FOUND THEN
	   DBMS_OUTPUT.PUT_LINE('HA SIDO ACTUALIZADO');
	ELSE
		DBMS_OUTPUT.PUT_LINE('NO HA SIDO ACTUALIZADO');
	END IF;
END ACTU_CLI;


DECLARE
	CODI CLIENTES.CLIENTE%TYPE := '&CODIGO';
	EMPR CLIENTES.EMPRESA%TYPE := '&EMPRESA';
BEGIN
	ACTU_CLI(CODI, EMPR);
END;


