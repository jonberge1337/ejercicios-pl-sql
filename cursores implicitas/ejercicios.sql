-- 1. Escribir un bloque PL/SQL que visualice la empresa, y nombre y apellidos de los gerentes de nuestros proveedores, ordenados por nombre de empresa.

-- Hacerlo mediante una estructura:

--   WHILE

DECLARE
CURSOR CONSULTA IS
	   SELECT EMPRESA, APELLIDOS, NOMBRE
	   FROM PROVEEDORES
	   ORDER BY EMPRESA;
	   
REGISTRO CONSULTA%ROWTYPE;
BEGIN
	OPEN CONSULTA;
	FETCH CONSULTA INTO REGISTRO;
	WHILE CONSULTA%FOUND LOOP
		  DBMS_OUTPUT.PUT_LINE(REGISTRO.EMPRESA||' '||REGISTRO.APELLIDOS||' '||REGISTRO.NOMBRE);
		  FETCH CONSULTA INTO REGISTRO;
	END LOOP;
	CLOSE CONSULTA;
END;
/
--   LOOP 

DECLARE
CURSOR CONSULTA IS
	   SELECT EMPRESA, APELLIDOS, NOMBRE
	   FROM PROVEEDORES
	   ORDER BY EMPRESA;
	   
REGISTRO CONSULTA%ROWTYPE;
BEGIN
	OPEN CONSULTA;
	LOOP
		FETCH CONSULTA INTO REGISTRO;
		EXIT WHEN CONSULTA%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(REGISTRO.EMPRESA||' '||REGISTRO.APELLIDOS||' '||REGISTRO.NOMBRE);

	END LOOP;
	CLOSE CONSULTA;
END;
/

-- ================================================================================================

DECLARE
CURSOR CONSULTA IS
	   SELECT EMPRESA, APELLIDOS, NOMBRE
	   FROM PROVEEDORES
	   ORDER BY EMPRESA;
	   
EMP PROVEEDORES.EMPRESA%TYPE;
APE PROVEEDORES.APELLIDOS%TYPE;
NOM PROVEEDORES.NOMBRE%TYPE;
BEGIN
	OPEN CONSULTA;
	LOOP
		FETCH CONSULTA INTO EMP, APE, NOM;
		EXIT WHEN CONSULTA%NOTFOUND;
		DBMS_OUTPUT.PUT_LINE(EMP||' '||APE||' '||NOM);

	END LOOP;
	CLOSE CONSULTA;
END;
/

--   Cursor FOR..LOOP

DECLARE
CURSOR CONSULTA IS
	   SELECT EMPRESA, APELLIDOS, NOMBRE
	   FROM PROVEEDORES
	   ORDER BY EMPRESA;
	   
BEGIN
	FOR FILA IN CONSULTA LOOP
		DBMS_OUTPUT.PUT_LINE(FILA.EMPRESA||' '||FILA.APELLIDOS||' '||FILA.NOMBRE);
	END LOOP;

END;
/

-- ================================================================================================

DECLARE
CURSOR CONSULTA IS
	   SELECT EMPRESA, APELLIDOS, NOMBRE
	   FROM PROVEEDORES
	   ORDER BY EMPRESA;

BEGIN
	FOR FILA IN CONSULTA LOOP
		DBMS_OUTPUT.PUT_LINE(FILA.EMPRESA||' '||FILA.APELLIDOS||' '||FILA.NOMBRE);
	END LOOP;

END;
/

-- 2. Crear un procedimiento de nombre VER_CLIENTES, que por medio de un cursor seleccione las descripciones de las empresas de los clientes de la provincia que nosotros pasemos como parámetro de entrada en el citado procedimiento y posteriormente los visualice por pantalla.

CREATE OR REPLACE PROCEDURE VER_CLIENTES(PRO IN PROVINCIAS.DESCRIPCION%TYPE)
IS
	CURSOR CONSULTA IS
		   SELECT EMPRESA
		   FROM CLIENTES
		   WHERE EXISTS(SELECT *
		   		 		FROM PROVINCIAS
						WHERE PROVINCIAS.PROVINCIA = CLIENTES.PROVINCIA
						AND UPPER()PROVINCIAS.DESCRIPCION = PRO);

BEGIN
	DBMS_OUTPUT.PUT_LINE('LAS SIGUIENTES EMPRESAS DE CLIENTES ESTAN EN '||PRO);
	FOR FILA IN CONSULTA LOOP
		DBMS_OUTPUT.PUT_LINE(FILA.EMPRESA);
	END LOOP;
END VER_CLIENTES;
/

-- =======================================================================================================

CREATE OR REPLACE PROCEDURE VER_CLIENTES(PRO IN PROVINCIAS.DESCRIPCION%TYPE)
IS
	CURSOR CONSULTA IS
		   SELECT EMPRESA
		   FROM CLIENTES
		   WHERE EXISTS(SELECT *
		   		 		FROM PROVINCIAS
						WHERE PROVINCIAS.PROVINCIA = CLIENTES.PROVINCIA
						AND UPPER(PROVINCIAS.DESCRIPCION) = UPPER(PRO));
	EMP CLIENTES.EMPRESA%TYPE;
BEGIN
	DBMS_OUTPUT.PUT_LINE('LAS SIGUIENTES EMPRESAS DE CLIENTES ESTAN EN '||PRO);
	
	OPEN CONSULTA;
	FETCH CONSULTA INTO EMP;
	WHILE CONSULTA%FOUND LOOP
		  DBMS_OUTPUT.PUT_LINE(EMP);
		  FETCH CONSULTA INTO EMP;
	END LOOP;
	
END VER_CLIENTES;
/

DECLARE
	PRO PROVINCIAS.DESCRIPCION%TYPE := '&PROVINCIA';
BEGIN
	VER_CLIENTES(PRO);
END;
/ 

-- =======================================================================================================

-- 3. Definir un cursor sobre una consulta que seleccione las provincias que tengan la letra A en su descripción.

-- Por cada una de ellas obtener el nº de clientes que contengan y mostrarlo por pantalla, de la forma:

 

 

--  LA PROVINCIA DE Barcelona TIENE 23 CLIENTES

 

 

-- Si no tienen clientes mostrar también un mensaje por pantalla.

-- Definir una función de nombre NUMERO_CLI que calcule el nº de clientes de una provincia.

CREATE OR REPLACE FUNCTION NUMERO_CLI(PRO PROVINCIAS.PROVINCIA%TYPE)
RETURN NUMBER
IS
	CLI CLIENTES.CLIENTE%TYPE;
	CANTIDAD NUMBER(8) := 0;
BEGIN
	SELECT COUNT(*) INTO CANTIDAD
	FROM CLIENTES
	WHERE PROVINCIA = PRO;
	RETURN CANTIDAD;
	
END NUMERO_CLI; 

-- WHILE

DECLARE
	CURSOR CONSULTA IS
		   SELECT PROVINCIA
		   FROM PROVINCIAS
		   WHERE UPPER(DESCRIPCION) LIKE '%A%';

	CANTIDAD NUMBER(8);
	PRO PROVINCIAS.PROVINCIA%TYPE;
BEGIN
	OPEN CONSULTA;
	FETCH CONSULTA INTO PRO;
	WHILE CONSULTA%FOUND LOOP
		  CANTIDAD := NUMERO_CLI(PRO);
		  IF CANTIDAD > 0 THEN
		  	  DBMS_OUTPUT.PUT_LINE('LAS PROVINCIA DE '||PRO||' TIENE '||CANTIDAD||' CLIENTES');
		  ELSE
			  DBMS_OUTPUT.PUT_LINE('LA PROVINCIA DE '||PRO||' NO TIENE NINGUN CLIENTE');
		  END IF;
		  FETCH CONSULTA INTO PRO;
	END LOOP;
	CLOSE CONSULTA;
END;

-- LOOP
DECLARE
	CURSOR CONSULTA IS
		   SELECT PROVINCIA
		   FROM PROVINCIAS
		   WHERE UPPER(DESCRIPCION) LIKE '%A%';

	CANTIDAD NUMBER(8);
	PRO PROVINCIAS.PROVINCIA%TYPE;
BEGIN
	OPEN CONSULTA;

	WHILE  LOOP
		  FETCH CONSULTA INTO PRO;
		  EXIT WHEN CONSULTA%NOTFOUND
		  CANTIDAD := NUMERO_CLI(PRO);
		  IF CANTIDAD > 0 THEN
		  	  DBMS_OUTPUT.PUT_LINE('LAS PROVINCIA DE '||PRO||' TIENE '||CANTIDAD||' CLIENTES');
		  ELSE
			  DBMS_OUTPUT.PUT_LINE('LA PROVINCIA DE '||PRO||' NO TIENE NINGUN CLIENTE');
		  END IF;
	END LOOP;
	CLOSE CONSULTA;
END;


-- 4. Crear un bloque PL/SQL que saque información respecto al stock en almacén de los artículos.

-- En función del número de existencias que contiene cada artículo, informar de su estado con respecto al valor mínimo exigido por el campo bajo_mínimo y al valor máximo fijado por el campo sobre_máximo, de la forma:

 

 

-- DEL ARTÍCULO X HAY Y  EXISTENCIAS DE MENOS RESPECTO AL MÍNIMO

-- DEL ARTÍCULO X HAY Y  EXISTENCIAS DE MÁS RESPECTO AL MÄXIMO

-- EL ARTICULO X ESTA EN EL RANGO DE EXISTENCIAS MÍNIMO_ MÁXIMO

 

 

-- WHILE

-- LOOP 

-- Cursor FOR .. LOOP
