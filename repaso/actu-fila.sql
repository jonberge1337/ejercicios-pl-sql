-- 7. Definir un procedimiento de nombre PRECIO_ARTI que seleccione de la tabla Mis_artículos las filas que superen un número de existencias dado.

-- Para cada uno de ellos compruebe y haga lo siguiente:

-- ü Si el precio de venta del artículo que se trata es nulo y el precio de costo no lo es, asignar al precio de venta, su precio de costo aplicándole una subida del 5%.

-- ü Si el precio de costo es nulo, asignarle su precio de venta, si no es nulo.

-- ü Si los dos precios son nulos, borrar el artículo.


-- Obtener al final del procedimiento, el número de filas actualizadas y borradas.


-- Adecuar los datos de la tabla Mis_artículos, para que el programa pueda ser convenientemente probado.


-- Realizar tres versiones:

-- ü Cursor FOR UPDATE.

-- ü ROWID

-- ü Sin ninguno de las anteriores.

CREATE OR REPLACE PROCEDURE PRECIO_ARTI(NUM IN NUMBER)
IS
    CURSOR CONSULTA IS
        SELECT PR_VENT, PR_COST
        FROM ARTICULOS
        WHERE EXISTENCIAS > NUM;
        FOR UPDATE;
    ACTUALIZADOS NUMBER(8);
    BORRADOS NUMBER(8);
BEGIN
    ACTUALIZADOS := 0;
    BORRADOS := 0;
    FOR FILA IN CONSULTA LOOP
        IF FILA.PR_COST IS NULL AND FILA.PR_VENT IS NULL THEN
            DELETE FROM ARTICULOS
            WHERE CURRENT OF CONSULTA;
            BORRADOS := BORRADOS + 1;
        ELSIF FILA.PR_COST IS NULL THEN
            UPDATE ARTICULOS
            SET PR_COST = PR_VENT
            WHERE CURRENT OF CONSULTA;
            ACTUALIZADOS :=  ACTUALIZADOS + 1;
        ELSIF FILA.PR_VENT IS NULL THEN
            UPDATE ARTICULOS
            SET PR_VENT = PR_COST * 1.05
            WHERE CURRENT OF CONSULTA;
            ACTUALIZADOS := ACTUALIZADOS + 1;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('FILAS ACTUALIZADAS' || ACTUALIZADOS);
    DBMS_OUTPUT.PUT_LINE('FILAS BORRADAS' || BORRADOS);
END PRECIO_ARTI;
/


CREATE OR REPLACE PROCEDURE PRECIO_ARTI(NUM IN NUMBER)
IS
    CURSOR CONSULTA IS
        SELECT PR_COST, PR_VENT, ROWID
        FROM ARTICULOS
        WHERE EXISTENCIAS > NUM;
    ACTUALIZADOS NUMBER(8);
    BORRADOS NUMBER(8);
BEGIN
    ACTUALIZADOS := 0;
    BORRADOS := 0;
    FOR FILA IN CONSULTA LOOP
        IF FILA.PR_COST IS NULL AND FILA.PR_VENT IS NULL THEN
            DELETE FROM ARTICULOS
            WHERE ROWID = FILA.ROWID;
            BORRADOS := BORRADOS + 1;
        ELSIF FILA.PR_COST IS NULL THEN
            UPDATE ARTICULOS
            SET PR_COST = PR_VENT
            WHERE ROWID = FILA.ROWID;
            ACTUALIZADOS :=  ACTUALIZADOS + 1;
        ELSIF FILA.PR_VENT IS NULL THEN
            UPDATE ARTICULOS
            SET PR_VENT = PR_COST * 1.05
            WHERE ROWID = FILA.ROWID;
            ACTUALIZADOS := ACTUALIZADOS + 1;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('FILAS ACTUALIZADAS' || ACTUALIZADOS);
    DBMS_OUTPUT.PUT_LINE('FILAS BORRADAS' || BORRADOS);
END PRECIO_ARTI;
/


CREATE OR REPLACE PROCEDURE PRECIO_ARTI(NUM IN NUMBER)
IS
    CURSOR CONSULTA IS
        SELECT ARTICULO, PROVEEDOR, PR_VENT, PR_COST
        FROM ARTICULOS
        WHERE EXISTENCIAS > NUM;
    ACTUALIZADOS NUMBER(8);
    BORRADOS NUMBER(8);
BEGIN
    ACTUALIZADOS := 0;
    BORRADOS := 0;
    FOR FILA IN CONSULTA LOOP
        IF FILA.PR_COST IS NULL AND FILA.PR_VENT IS NULL THEN
            DELETE FROM ARTICULOS
            WHERE ARTICULO = FILA.ARTICULO
            AND PROVEEDOR = FILA.PROVEEDOR;
            BORRADOS := BORRADOS + 1;
        ELSIF FILA.PR_COST IS NULL THEN
            UPDATE ARTICULOS
            SET PR_COST = PR_VENT
            WHERE ARTICULO = FILA.ARTICULO
            AND PROVEEDOR = FILA.PROVEEDOR;
            ACTUALIZADOS :=  ACTUALIZADOS + 1;
        ELSIF FILA.PR_VENT IS NULL THEN
            UPDATE ARTICULOS
            SET PR_VENT = PR_COST * 1.05
            WHERE ARTICULO = FILA.ARTICULO
            AND PROVEEDOR = FILA.PROVEEDOR;
            ACTUALIZADOS := ACTUALIZADOS + 1;
        END IF;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('FILAS ACTUALIZADAS' || ACTUALIZADOS);
    DBMS_OUTPUT.PUT_LINE('FILAS BORRADAS' || BORRADOS);
END PRECIO_ARTI;
/

-- 8. Dada la tabla Mis_articulos, definir un procedimiento de nombre FECHAS_ARTI que declare un cursor que devuelva los
-- artículos de los suministradores de la descripción de la provincia que se pase como parámetro de entrada.

-- Compruebe los valores de las columnas fecha de última salida y fecha de última entrada y proceda:

-- ü Si los dos son nulos, borrarlo.

-- ü Si alguno es nulo, asignarle la fecha actual.

-- ü Si la entrada es más reciente que la salida. Actualizar la salida con la fecha de entrada.


-- Sacar por pantalla el número de artículos actualizados y borrados.


-- Versiones:

-- ü FOR UPDATE.

-- ü ROWID.

-- ü Sin ninguno de las anteriores.

CREATE OR REPLACE PROCEDURE FECHA_ARTI(DESCRI IN PROVINCIAS.DESCRIPCION%TYPE, ACTUALIZADOS OUT NUMBER, BORRADOS OUT NUMBER)
IS
    CURSOR CONSULTA IS
        SELECT FECHA_ULT_ENT, FECHA_ULT_SAL
        FROM MIS_ARTICULOS, PROVEEDORES, PROVINCIAS
        WHERE MIS_ARTICULOS.PROVEEDOR = PROVEEDORES.PROVEEDOR
        AND PROVINCIAS.PROVINCIA = PROVEEDORES.PROVINCIA
        AND UPPER(PROVINCIAS.DESCRIPCION) = UPPER(DESCRI))
        FOR UPDATE;
    
BEGIN
    ACTUALIZADOS := 0;
    BORRADOS := 0;

    FOR FILA IN CONSULTA LOOP
        IF FILA.FECHA_ULT_ENT IS NULL AND FILA.FECHA_ULT_SAL IS NULL THEN
            DELETE FROM MIS_ARTICULOS
            WHERE CURRENT OF CONSULTA;

            BORRADOS := BORRADOS + 1;
        ELSIF FILA.FECHA_ULT_ENT IS NULL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_ENT = SYSDATE
            WHERE CURRENT OF CONSULTA;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        ELSIF FILA.FECHA_ULT_SAL IS NULL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_SAL = SYSDATE
            WHERE CURRENT OF CONSULTA;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        ELSIF FILA.FECHA_ULT_ENT > FILA.FECHA_ULT_SAL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_SAL = FECHA_ULT_ENT
            WHERE CURRENT OF CONSULTA;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('EL NUMERO DE ARTICULOS BORRADOS: ' || BORRADOS);
    DBMS_OUTPUT.PUT_LINE('EL NUMERO DE ARTICULOS ACTUALIZADOS: ' || ACTUALIZADOS);
END FECHA_ARTI;
/


CREATE OR REPLACE PROCEDURE FECHA_ARTI(DESCRI IN PROVINCIAS.DESCRIPCION%TYPE, ACTUALIZADOS OUT NUMBER, BORRADOS OUT NUMBER)
IS
    CURSOR CONSULTA IS
        SELECT FECHA_ULT_ENT, FECHA_ULT_SAL, ROWID
        FROM MIS_ARTICULOS, PROVEEDORES, PROVINCIAS
        WHERE MIS_ARTICULOS.PROVEEDOR = PROVEEDORES.PROVEEDOR
        AND PROVINCIAS.PROVINCIA = PROVEEDORES.PROVINCIA
        AND UPPER(PROVINCIAS.DESCRIPCION) = UPPER(DESCRI))
        FOR UPDATE;
    
BEGIN
    ACTUALIZADOS := 0;
    BORRADOS := 0;

    FOR FILA IN CONSULTA LOOP
        IF FILA.FECHA_ULT_ENT IS NULL AND FILA.FECHA_ULT_SAL IS NULL THEN
            DELETE FROM MIS_ARTICULOS
            WHERE ROWID = FILA.ROWID;

            BORRADOS := BORRADOS + 1;
        ELSIF FILA.FECHA_ULT_ENT IS NULL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_ENT = SYSDATE
            WHERE ROWID = FILA.ROWID;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        ELSIF FILA.FECHA_ULT_SAL IS NULL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_SAL = SYSDATE
            WHERE ROWID = FILA.ROWID;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        ELSIF FILA.FECHA_ULT_ENT > FILA.FECHA_ULT_SAL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_SAL = FECHA_ULT_ENT
            WHERE ROWID = FILA.ROWID;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('EL NUMERO DE ARTICULOS BORRADOS: ' || BORRADOS);
    DBMS_OUTPUT.PUT_LINE('EL NUMERO DE ARTICULOS ACTUALIZADOS: ' || ACTUALIZADOS);
END FECHA_ARTI;
/


CREATE OR REPLACE PROCEDURE FECHA_ARTI(DESCRI IN PROVINCIAS.DESCRIPCION%TYPE, ACTUALIZADOS OUT NUMBER, BORRADOS OUT NUMBER)
IS
    CURSOR CONSULTA IS
        SELECT ARTICULO, PROVEEDOR, FECHA_ULT_ENT, FECHA_ULT_SAL
        FROM MIS_ARTICULOS, PROVEEDORES, PROVINCIAS
        WHERE MIS_ARTICULOS.PROVEEDOR = PROVEEDORES.PROVEEDOR
        AND PROVINCIAS.PROVINCIA = PROVEEDORES.PROVINCIA
        AND UPPER(PROVINCIAS.DESCRIPCION) = UPPER(DESCRI))
        FOR UPDATE;

BEGIN
    ACTUALIZADOS := 0;
    BORRADOS := 0;

    FOR FILA IN CONSULTA LOOP
        IF FILA.FECHA_ULT_ENT IS NULL AND FILA.FECHA_ULT_SAL IS NULL THEN
            DELETE FROM MIS_ARTICULOS
            WHERE ARTICULO = FILA.ARTICULO
            AND PROVEEDOR = FILA.PROVEEDOR;

            BORRADOS := BORRADOS + 1;
        ELSIF FILA.FECHA_ULT_ENT IS NULL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_ENT = SYSDATE
            WHERE ARTICULO = FILA.ARTICULO
            AND PROVEEDOR = FILA.PROVEEDOR;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        ELSIF FILA.FECHA_ULT_SAL IS NULL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_SAL = SYSDATE
            WHERE ARTICULO = FILA.ARTICULO
            AND PROVEEDOR = FILA.PROVEEDOR;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        ELSIF FILA.FECHA_ULT_ENT > FILA.FECHA_ULT_SAL THEN
            UPDATE MIS_ARTICULOS
            SET FECHA_ULT_SAL = FECHA_ULT_ENT
            WHERE ARTICULO = FILA.ARTICULO
            AND PROVEEDOR = FILA.PROVEEDOR;

            ACTUALIZADOS := ACTUALIZADOS + 1;
        END IF;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('EL NUMERO DE ARTICULOS BORRADOS: ' || BORRADOS);
    DBMS_OUTPUT.PUT_LINE('EL NUMERO DE ARTICULOS ACTUALIZADOS: ' || ACTUALIZADOS);
END FECHA_ARTI;
/


-- 9. Crear una función de nombre BORRA_CLIENTE que dado un código de cliente lo borre de la tabla Mis_clientes si y solo si existe y no ha realizado ninguna compra.

-- Realizar un bloque PL/SQL que llame a dicha función y devuelva alguno de éstos mensajes:

-- ü El cliente XX de nombre XXXXX ha sido borrado.

-- ü El cliente XX de nombre XXXXX tiene compras.

-- ü El cliente XX no existe.

CREATE OR REPLACE FUNCTION BORRA_CLIENTE(CLI IN MIS_CLIENTES.CLIENTE%TYPE)
RETURN BOOLEAN
IS
    CLI MIS_CLIENTES.CLIENTE%TYPE;
    COMPRAS NUMBER(8);
BEGIN
    SELECT CLIENTE INTO CLI
    FROM MIS_CLIENTES
    WHERE CLIENTE = CLI;

    SELECT COUNT(*) INTO COMPRAS
    FROM ALBARANES
    WHERE CLIENTE = CLI;
    
    IF COMPRAS > 0 THEN
        RETURN TRUE;
    ELSE
        DELETE FROM MIS_CLIENTES
        WHERE CLIENTE = CLI;

        RETURN FALSE;
    END IF;


EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END BORRA_CLIENTE;
/

DECLARE
    CLI MIS_CLIENTES.CLIENTE%TYPE := &CLIENTE;
    NOM MIS_CLIENTES.NOMBRE%TYPE;
    TIENE BOOLEAN;
BEGIN
    TIENE := BORRA_CLIENTE(CLI);
    IF NOT TIENE THEN
        SELECT NOMBRE INTO NOM
        FROM MIS_CLIENTES
        WHERE CLIENTE = CLI;

        DBMS_OUTPUT.PUT_LINE('EL CLIENTE ' || CLI || ' DE NOMBRE ' || NOM || ' HA SIDO BORRADO');
    IF TIENE THEN
        SELECT NOMBRE INTO NOM
        FROM MIS_CLIENTES
        WHERE CLIENTE = CLI;

        DBMS_OUTPUT.PUT_LINE('EL CLIENTE ' || CLI || ' DE NOMBRE ' || NOM || ' TIENE COMPRAS');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EL CLIENTE ' || CLI || ' NO EXISTE');
    END IF;
END;
/

-- 10. Crear la tabla Mis_Formpagos a imagen de la tabla Formpagos del usuario almacén.
CREATE TABLE MIS_FORMPAGOS
AS SELECT *
FROM FORMPAGOS;
/

-- 11. Crear un procedimiento de nombre ALTA_FORMA que dado un código y una descripción de una forma de pago:

-- ü Inserte la nueva forma de pago si no existe ni el código ni la nueva descripción de forma de pago en la tabla Mis_Formpagos.

-- ü Actualice la descripción de la forma de pago si su código existe.


-- Informar en cada caso.
CREATE OR REPLACE PROCEDURE ALTA_FORMA(COD IN FORMPAGOS.FORMPAGO%TYPE, DESCRI IN FORMPAGOS.DESCRIPCION%TYPE)
IS
    CODI FORMPAGOS.FORMPAGO%TYPE;
    DESCR FORMPAGOS.DESCRIPCION%TYPE;
BEGIN
    SELECT FORMPAGO, DESCRIPCION INTO CODI, DESCR
    FROM MIS_FORMPAGOS
    WHERE FORMPAGO = COD;

    IF DESCR != DESCRI THEN
        UPDATE MIS_FORMPAGOS
        SET DESCRIPCION = DESCRI
        WHERE FORMPAGO = CODI;

        DBMS_OUTPUT.PUT_LINE('LA DESCRIPCION HA SIDO ACTUALIZADO');
    ELSE
        DBMS_OUTPUT.PUT_LINE('LA FORMA DE PAGO ' || COD || ' YA EXISTE CON LA MISMA DESCRIPCION');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO MIS_FORMPAGOS
        VALUES(COD, DESCRI);

        DBMS_OUTPUT.PUT_LINE('HA SIDO INSERTADA LA NUEVA FORMA DE PAGO');
END ALTA_FORMA;

DECLARE
    CODI FORMPAGOS.FORMPAGO%TYPE := &FORMPAGO;
    DESCRI FORMPAGOS.DESCRIPCION%TYPE := &DESCRIPCION;
BEGIN
    ALTA_FORMA(CODI, DESCRI);
END;
/